/*
 Copyright(c) 1996-1998
 IPA, ETL, AT21, FSIABC, FXIS, InArc, MRI, NUL, SBC, Sharp, TEC, TIS

 All rights reserved.  No guarantee.
 This technology is a result of the Advanced Software  Enrichment 
 Project of Information-technology Promotion Agency, Japan (IPA).

 Permissions  to  use,  copy, modify and distribute this software
 are governed by the terms and conditions set forth in  the  file 
 COPYRIGHT, located on the top directory of this software.
 */


//----------------------------------------------------
// The following code was generated by CUP v0.9e
// Mon Feb 02 08:32:32 GMT+09:00 1998
//----------------------------------------------------

package JP.go.ipa.oz.compiler;

import java_cup.runtime.*;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {1, 2},     {0, 2},     {1, 1},     {1, 1},     {84, 0}, 
        {2, 6},     {20, 1},     {20, 1},     {15, 0},     {15, 2}, 
        {16, 1},     {16, 1},     {16, 1},     {3, 0},     {85, 0}, 
        {3, 3},     {4, 2},     {86, 0},     {4, 5},     {4, 1}, 
        {5, 3},     {5, 1},     {87, 0},     {6, 4},     {6, 2}, 
        {7, 0},     {7, 2},     {8, 1},     {8, 1},     {8, 1}, 
        {8, 2},     {8, 2},     {9, 5},     {88, 0},     {10, 9}, 
        {89, 0},     {10, 9},     {90, 0},     {11, 7},     {17, 0}, 
        {17, 1},     {17, 1},     {18, 0},     {18, 2},     {19, 1}, 
        {19, 1},     {19, 1},     {19, 1},     {19, 1},     {19, 1}, 
        {14, 1},     {14, 1},     {14, 1},     {14, 1},     {14, 1}, 
        {14, 1},     {14, 1},     {14, 1},     {14, 1},     {14, 1}, 
        {14, 2},     {12, 1},     {12, 1},     {91, 0},     {13, 4}, 
        {21, 0},     {21, 4},     {21, 2},     {22, 3},     {22, 1}, 
        {23, 3},     {23, 1},     {24, 1},     {24, 3},     {24, 1}, 
        {25, 0},     {25, 1},     {26, 1},     {26, 1},     {26, 1}, 
        {26, 1},     {26, 1},     {26, 1},     {26, 1},     {26, 1}, 
        {26, 1},     {26, 1},     {26, 1},     {26, 1},     {26, 2}, 
        {26, 2},     {41, 1},     {41, 1},     {46, 0},     {46, 2}, 
        {92, 0},     {27, 4},     {28, 2},     {93, 0},     {29, 4}, 
        {94, 0},     {32, 4},     {30, 5},     {44, 1},     {44, 3}, 
        {95, 0},     {31, 6},     {96, 0},     {40, 5},     {47, 0}, 
        {47, 2},     {48, 2},     {48, 1},     {49, 0},     {49, 1}, 
        {50, 1},     {50, 2},     {45, 3},     {45, 2},     {97, 0}, 
        {33, 6},     {98, 0},     {34, 8},     {99, 0},     {35, 9}, 
        {100, 0},     {36, 4},     {36, 2},     {37, 3},     {37, 3}, 
        {37, 3},     {38, 3},     {39, 3},     {43, 1},     {43, 3}, 
        {42, 0},     {101, 0},     {42, 10},     {52, 0},     {52, 1}, 
        {53, 1},     {53, 1},     {53, 1},     {53, 3},     {53, 1}, 
        {53, 1},     {102, 0},     {58, 7},     {67, 1},     {67, 1}, 
        {67, 1},     {67, 1},     {67, 1},     {67, 1},     {67, 1}, 
        {67, 1},     {67, 1},     {68, 1},     {68, 1},     {70, 3}, 
        {59, 6},     {59, 4},     {59, 6},     {60, 1},     {60, 6}, 
        {60, 6},     {74, 0},     {74, 3},     {74, 1},     {72, 2}, 
        {83, 1},     {83, 1},     {54, 1},     {54, 1},     {71, 2}, 
        {55, 2},     {55, 1},     {55, 1},     {79, 1},     {79, 1}, 
        {79, 1},     {61, 3},     {61, 1},     {75, 1},     {75, 1}, 
        {75, 1},     {62, 3},     {62, 1},     {76, 1},     {76, 1}, 
        {63, 3},     {63, 1},     {77, 1},     {77, 1},     {77, 1}, 
        {77, 1},     {64, 3},     {64, 1},     {78, 1},     {78, 1}, 
        {65, 3},     {65, 1},     {66, 3},     {66, 1},     {56, 5}, 
        {56, 1},     {69, 3},     {69, 3},     {69, 3},     {80, 1}, 
        {80, 1},     {81, 1},     {81, 1},     {81, 1},     {81, 1}, 
        {81, 1},     {82, 1},     {82, 1},     {51, 1},     {51, 1}, 
        {57, 0},     {57, 3},     {57, 1},     {73, 1},     {73, 1}, 
        {73, 1},     {73, 1},     {73, 1}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}


  /** access to parse action table */
  public short[][] action_table() {return parser_table.action_table ();}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,3,2,4,15,1,-1,-1},
    /*1*/{16,9,20,7,-1,-1},
    /*2*/{-1,-1},
    /*3*/{2,6,15,1,-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{-1,-1},
    /*8*/{-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{84,15,-1,-1},
    /*15*/{3,16,-1,-1},
    /*16*/{6,31,-1,-1},
    /*17*/{85,18,-1,-1},
    /*18*/{4,21,5,19,-1,-1},
    /*19*/{-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{86,25,-1,-1},
    /*25*/{5,26,-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{-1,-1},
    /*29*/{87,33,-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{7,34,-1,-1},
    /*34*/{8,38,9,39,10,35,11,43,17,42,-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{18,47,-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{14,55,19,50,20,65,-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{22,346,-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{14,71,20,65,21,72,-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{14,342,20,65,-1,-1},
    /*74*/{89,75,-1,-1},
    /*75*/{12,79,13,77,-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{91,80,-1,-1},
    /*79*/{-1,-1},
    /*80*/{46,81,-1,-1},
    /*81*/{14,87,20,65,26,133,27,104,28,110,29,115,30,85,31,113,32,108,33,97,34,111,35,98,37,131,38,130,39,102,41,89,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{51,221,52,338,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*87*/{94,335,-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{102,200,-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{25,323,-1,-1},
    /*101*/{83,199,-1,-1},
    /*102*/{-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{53,123,54,146,55,317,58,160,59,141,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*108*/{-1,-1},
    /*109*/{25,315,-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{99,289,-1,-1},
    /*118*/{29,275,-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{98,247,-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{93,239,-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{80,234,81,233,82,235,-1,-1},
    /*128*/{51,221,52,222,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{51,158,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*136*/{-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{53,123,54,146,55,209,58,160,59,141,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*141*/{-1,-1},
    /*142*/{-1,-1},
    /*143*/{102,200,-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{83,199,-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{78,180,-1,-1},
    /*152*/{77,174,-1,-1},
    /*153*/{76,169,-1,-1},
    /*154*/{75,164,-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{53,123,54,146,55,168,58,160,59,141,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*165*/{-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
    /*168*/{-1,-1},
    /*169*/{53,123,54,146,55,156,58,160,59,141,61,172,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*170*/{-1,-1},
    /*171*/{-1,-1},
    /*172*/{75,164,-1,-1},
    /*173*/{-1,-1},
    /*174*/{53,123,54,146,55,156,58,160,59,141,61,154,62,178,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*175*/{-1,-1},
    /*176*/{-1,-1},
    /*177*/{-1,-1},
    /*178*/{76,169,-1,-1},
    /*179*/{-1,-1},
    /*180*/{53,123,54,146,55,156,58,160,59,141,61,154,62,153,63,182,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*181*/{-1,-1},
    /*182*/{77,174,-1,-1},
    /*183*/{-1,-1},
    /*184*/{-1,-1},
    /*185*/{51,186,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,74,187,79,140,83,107,-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{51,190,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*189*/{-1,-1},
    /*190*/{-1,-1},
    /*191*/{53,123,54,146,55,156,58,160,59,141,61,154,62,153,63,152,64,192,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*192*/{78,180,-1,-1},
    /*193*/{53,123,54,146,55,156,56,196,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*194*/{53,123,54,146,55,156,58,160,59,141,61,154,62,153,63,152,64,151,65,195,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*195*/{-1,-1},
    /*196*/{-1,-1},
    /*197*/{53,123,54,146,55,156,56,198,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,167,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*198*/{-1,-1},
    /*199*/{-1,-1},
    /*200*/{-1,-1},
    /*201*/{51,186,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,74,202,79,140,83,107,-1,-1},
    /*202*/{-1,-1},
    /*203*/{-1,-1},
    /*204*/{-1,-1},
    /*205*/{-1,-1},
    /*206*/{51,186,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,74,207,79,140,83,107,-1,-1},
    /*207*/{-1,-1},
    /*208*/{-1,-1},
    /*209*/{-1,-1},
    /*210*/{51,211,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*211*/{-1,-1},
    /*212*/{26,215,27,104,28,110,29,115,30,85,31,113,33,97,34,111,35,98,37,131,38,130,39,102,44,214,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*213*/{102,200,-1,-1},
    /*214*/{-1,-1},
    /*215*/{-1,-1},
    /*216*/{26,217,27,104,28,110,29,115,30,85,31,113,33,97,34,111,35,98,37,131,38,130,39,102,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*217*/{-1,-1},
    /*218*/{92,219,-1,-1},
    /*219*/{26,220,27,104,28,110,29,115,30,85,31,113,33,97,34,111,35,98,37,131,38,130,39,102,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*220*/{-1,-1},
    /*221*/{-1,-1},
    /*222*/{-1,-1},
    /*223*/{-1,-1},
    /*224*/{-1,-1},
    /*225*/{-1,-1},
    /*226*/{-1,-1},
    /*227*/{-1,-1},
    /*228*/{-1,-1},
    /*229*/{-1,-1},
    /*230*/{-1,-1},
    /*231*/{-1,-1},
    /*232*/{-1,-1},
    /*233*/{51,238,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*234*/{51,237,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*235*/{51,236,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*236*/{-1,-1},
    /*237*/{-1,-1},
    /*238*/{-1,-1},
    /*239*/{46,240,-1,-1},
    /*240*/{14,87,20,65,26,133,27,104,28,110,29,115,30,85,31,113,32,108,33,97,34,111,35,98,37,131,38,130,39,102,41,89,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*241*/{-1,-1},
    /*242*/{-1,-1},
    /*243*/{-1,-1},
    /*244*/{51,186,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,74,245,79,140,83,107,-1,-1},
    /*245*/{-1,-1},
    /*246*/{-1,-1},
    /*247*/{26,248,27,104,28,110,29,115,30,85,31,113,33,97,34,111,35,98,37,131,38,130,39,102,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*248*/{-1,-1},
    /*249*/{-1,-1},
    /*250*/{51,251,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*251*/{-1,-1},
    /*252*/{-1,-1},
    /*253*/{-1,-1},
    /*254*/{51,255,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*255*/{-1,-1},
    /*256*/{95,257,-1,-1},
    /*257*/{40,259,-1,-1},
    /*258*/{96,260,-1,-1},
    /*259*/{-1,-1},
    /*260*/{47,261,-1,-1},
    /*261*/{26,268,27,104,28,110,29,115,30,85,31,113,33,97,34,111,35,98,37,131,38,130,39,102,45,266,48,267,49,262,50,265,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*262*/{-1,-1},
    /*263*/{-1,-1},
    /*264*/{51,271,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*265*/{26,270,27,104,28,110,29,115,30,85,31,113,33,97,34,111,35,98,37,131,38,130,39,102,45,269,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*266*/{-1,-1},
    /*267*/{-1,-1},
    /*268*/{-1,-1},
    /*269*/{-1,-1},
    /*270*/{-1,-1},
    /*271*/{-1,-1},
    /*272*/{-1,-1},
    /*273*/{-1,-1},
    /*274*/{-1,-1},
    /*275*/{42,277,43,276,-1,-1},
    /*276*/{-1,-1},
    /*277*/{-1,-1},
    /*278*/{-1,-1},
    /*279*/{29,280,-1,-1},
    /*280*/{-1,-1},
    /*281*/{14,282,20,65,-1,-1},
    /*282*/{-1,-1},
    /*283*/{-1,-1},
    /*284*/{-1,-1},
    /*285*/{101,286,-1,-1},
    /*286*/{46,287,-1,-1},
    /*287*/{14,87,20,65,26,133,27,104,28,110,29,115,30,85,31,113,32,108,33,97,34,111,35,98,37,131,38,130,39,102,41,89,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*288*/{-1,-1},
    /*289*/{-1,-1},
    /*290*/{14,291,20,65,36,294,53,123,54,101,57,293,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,295,83,107,-1,-1},
    /*291*/{100,304,-1,-1},
    /*292*/{102,200,-1,-1},
    /*293*/{-1,-1},
    /*294*/{51,221,52,296,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*295*/{-1,-1},
    /*296*/{-1,-1},
    /*297*/{53,123,54,101,57,298,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,295,83,107,-1,-1},
    /*298*/{-1,-1},
    /*299*/{53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,302,83,107,-1,-1},
    /*300*/{26,301,27,104,28,110,29,115,30,85,31,113,33,97,34,111,35,98,37,131,38,130,39,102,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*301*/{-1,-1},
    /*302*/{-1,-1},
    /*303*/{-1,-1},
    /*304*/{23,306,24,308,58,305,-1,-1},
    /*305*/{-1,-1},
    /*306*/{-1,-1},
    /*307*/{102,200,-1,-1},
    /*308*/{-1,-1},
    /*309*/{51,310,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*310*/{-1,-1},
    /*311*/{-1,-1},
    /*312*/{24,313,58,305,-1,-1},
    /*313*/{-1,-1},
    /*314*/{-1,-1},
    /*315*/{-1,-1},
    /*316*/{-1,-1},
    /*317*/{-1,-1},
    /*318*/{-1,-1},
    /*319*/{-1,-1},
    /*320*/{51,186,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,74,321,79,140,83,107,-1,-1},
    /*321*/{-1,-1},
    /*322*/{-1,-1},
    /*323*/{-1,-1},
    /*324*/{-1,-1},
    /*325*/{-1,-1},
    /*326*/{-1,-1},
    /*327*/{51,186,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,74,328,79,140,83,107,-1,-1},
    /*328*/{-1,-1},
    /*329*/{-1,-1},
    /*330*/{51,331,53,123,54,146,55,156,56,155,58,160,59,141,61,154,62,153,63,152,64,151,65,149,66,148,67,132,68,127,69,157,70,142,71,145,72,161,79,140,83,107,-1,-1},
    /*331*/{-1,-1},
    /*332*/{97,333,-1,-1},
    /*333*/{26,334,27,104,28,110,29,115,30,85,31,113,33,97,34,111,35,98,37,131,38,130,39,102,53,123,54,101,58,120,59,83,60,112,67,132,68,127,69,116,70,90,71,99,72,125,73,138,83,107,-1,-1},
    /*334*/{-1,-1},
    /*335*/{23,336,24,308,58,305,-1,-1},
    /*336*/{-1,-1},
    /*337*/{-1,-1},
    /*338*/{-1,-1},
    /*339*/{-1,-1},
    /*340*/{-1,-1},
    /*341*/{-1,-1},
    /*342*/{-1,-1},
    /*343*/{-1,-1},
    /*344*/{-1,-1},
    /*345*/{-1,-1},
    /*346*/{-1,-1},
    /*347*/{-1,-1},
    /*348*/{-1,-1},
    /*349*/{-1,-1},
    /*350*/{14,71,20,65,21,351,-1,-1},
    /*351*/{-1,-1},
    /*352*/{88,353,-1,-1},
    /*353*/{12,354,13,77,-1,-1},
    /*354*/{-1,-1},
    /*355*/{-1,-1},
    /*356*/{14,71,20,65,21,357,-1,-1},
    /*357*/{-1,-1},
    /*358*/{90,359,-1,-1},
    /*359*/{13,360,-1,-1},
    /*360*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF symbol index */
  public int EOF_sym() {return 0;}

  /** error symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next token */
  public java_cup.runtime.token scan()
    throws java.lang.Exception
    {

    return scanner_obj.getNextToken();

    }


  /* scanner object */
  private scanner scanner_obj;

  /* mode of parser, see also 'action code' */
  int parser_mode;

  public void syntax_error (token cur_token) {
    OzcError.print ("syntaxError");
  }

  public void unrecovered_syntax_error (token cur_token) {}

  /* set parser_mode (flag) of action object */
  public void user_init () {
    action_obj.init (parser_mode);
  }

  /* parse */
  private synchronized ClassList parse (String file) {
    OzcError.initialize (file);
    Emitter.reset ();

    try {
      scanner_obj = new scanner (file);
      try {
	if (ozc.isDebug ()) 
	  debug_parse ();
	else
	  parse ();
      } catch (StopCompilation e) {
	OzcError.cannotCompileInterface (file);
      } catch (Exception e) {
	ozc.catchException (e);
      }

      /* important */
      ClassList class_list = action_obj.after ();

      int no_errors = OzcError.getNoErrors ();
      if (no_errors > 0) {
	ozc.debugln (file + ": " + no_errors + " errors occured.");

	for (int i = 0, size = class_list.size (); i < size; i++) {
	  ClassType c = class_list.get (i);
	  c.status = ClassType.CLS_CANNOT_COMPILE;
	}	

	return null;
      } 
	
      return class_list;
    } catch (java.io.IOException e) {
      OzcError.cannotOpenFile (file);
      return null;
    } finally {
      OzcError.finish ();
    }

  }

  boolean parseDebug (String file, boolean only_if) {
    parser_mode = ParserAction.PM_DEBUG;
    if (only_if)
      parser_mode |= ParserAction.PM_INTERFACE;
    if (parse (file) == null)
      return false;
    else
      return true;
  }

  ClassList parseInterface (String file) {
    if (ozc.isVerbose ())
      ozc.debugln (file + ": compiling for interface.");

    parser_mode = ParserAction.PM_INTERFACE;
    ClassList cl = parse (file);

    return cl;
  }

  ClassList parseImplementation (String file) {
    if (ozc.isVerbose ())
      ozc.debugln (file + ": compiling for implementation.");

    parser_mode = ParserAction.PM_IMPLEMENTATION;
    ClassList cl = parse (file);

    return cl;
  }


};

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {


  ParserAction action;

  /* initialization */
  final void init (int mode) {
    action = new ParserAction (mode);
  }

  /* processing after parsing */
  final ClassList after () {
    return action.after ();
  }


  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* object for return from actions */
      java_cup.runtime.symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // exp_of_exp_stmt ::= instantiate_exp 
            {
              CUP$result = new ExpressionSym(/*exp_of_exp_stmt*/73);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // exp_of_exp_stmt ::= method_invoke_exp 
            {
              CUP$result = new ExpressionSym(/*exp_of_exp_stmt*/73);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // exp_of_exp_stmt ::= post_increment_or_decrement_exp 
            {
              CUP$result = new ExpressionSym(/*exp_of_exp_stmt*/73);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // exp_of_exp_stmt ::= pre_increment_or_decrement_exp 
            {
              CUP$result = new ExpressionSym(/*exp_of_exp_stmt*/73);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // exp_of_exp_stmt ::= assign_exp 
            {
              CUP$result = new ExpressionSym(/*exp_of_exp_stmt*/73);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmt_exp_list ::= exp_of_exp_stmt 
            {
              CUP$result = new ExpressionSym(/*stmt_exp_list*/57);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // stmt_exp_list ::= stmt_exp_list COMMA exp_of_exp_stmt 
            {
              CUP$result = new ExpressionSym(/*stmt_exp_list*/57);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append (", ");
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.stmtExpList (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // stmt_exp_list ::= 
            {
              CUP$result = new ExpressionSym(/*stmt_exp_list*/57);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // exp ::= conditional_exp 
            {
              CUP$result = new ExpressionSym(/*exp*/51);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // exp ::= assign_exp 
            {
              CUP$result = new ExpressionSym(/*exp*/51);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // assign_operator3 ::= OROREQUAL 
            {
              CUP$result = new OzStrToken(/*assign_operator3*/82);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " ||= ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // assign_operator3 ::= ANDANDEQUAL 
            {
              CUP$result = new OzStrToken(/*assign_operator3*/82);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " &&= ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // assign_operator2 ::= MODEQUAL 
            {
              CUP$result = new OzStrToken(/*assign_operator2*/81);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " %= ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // assign_operator2 ::= DIVIDEEQUAL 
            {
              CUP$result = new OzStrToken(/*assign_operator2*/81);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " /= ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // assign_operator2 ::= TIMESEQUAL 
            {
              CUP$result = new OzStrToken(/*assign_operator2*/81);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " *= ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // assign_operator2 ::= MINUSEQUAL 
            {
              CUP$result = new OzStrToken(/*assign_operator2*/81);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " -= ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // assign_operator2 ::= PLUSEQUAL 
            {
              CUP$result = new OzStrToken(/*assign_operator2*/81);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " += ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // assign_operator1 ::= EQUALBAR 
            {
              CUP$result = new OzStrToken(/*assign_operator1*/80);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " =| ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // assign_operator1 ::= EQUAL 
            {
              CUP$result = new OzStrToken(/*assign_operator1*/80);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " = ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // assign_exp ::= name assign_operator3 exp 
            {
              CUP$result = new ExpressionSym(/*assign_exp*/69);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.assignBoolExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // assign_exp ::= name assign_operator2 exp 
            {
              CUP$result = new ExpressionSym(/*assign_exp*/69);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.assignNumericExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // assign_exp ::= name assign_operator1 exp 
            {
              CUP$result = new ExpressionSym(/*assign_exp*/69);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.assignExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // conditional_exp ::= binary_exp_5 
            {
              CUP$result = new ExpressionSym(/*conditional_exp*/56);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // conditional_exp ::= binary_exp_5 QUESTION conditional_exp COLON conditional_exp 
            {
              CUP$result = new ExpressionSym(/*conditional_exp*/56);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-4)).str_val);
			     ((ExpressionSym)CUP$result).append (" ? ");
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append (" : ");
			     ((ExpressionSym)CUP$result).append ((/*e3*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.conditionalExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-4)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e3*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // binary_exp_5 ::= binary_exp_4 
            {
              CUP$result = new ExpressionSym(/*binary_exp_5*/66);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // binary_exp_5 ::= binary_exp_5 OROR binary_exp_4 
            {
              CUP$result = new ExpressionSym(/*binary_exp_5*/66);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append (" || ");
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.binaryBoolExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // binary_exp_4 ::= binary_exp_3 
            {
              CUP$result = new ExpressionSym(/*binary_exp_4*/65);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // binary_exp_4 ::= binary_exp_4 ANDAND binary_exp_3 
            {
              CUP$result = new ExpressionSym(/*binary_exp_4*/65);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append (" && ");
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.binaryBoolExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // binary_operator_3 ::= NOTEQUAL 
            {
              CUP$result = new OzStrToken(/*binary_operator_3*/78);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " != ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // binary_operator_3 ::= EQUALEQUAL 
            {
              CUP$result = new OzStrToken(/*binary_operator_3*/78);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " == ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // binary_exp_3 ::= binary_exp_2 
            {
              CUP$result = new ExpressionSym(/*binary_exp_3*/64);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // binary_exp_3 ::= binary_exp_3 binary_operator_3 binary_exp_2 
            {
              CUP$result = new ExpressionSym(/*binary_exp_3*/64);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.binaryExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // binary_operator_2 ::= GTE 
            {
              CUP$result = new OzStrToken(/*binary_operator_2*/77);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " >= ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // binary_operator_2 ::= LTE 
            {
              CUP$result = new OzStrToken(/*binary_operator_2*/77);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " <= ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // binary_operator_2 ::= RANGLE 
            {
              CUP$result = new OzStrToken(/*binary_operator_2*/77);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " > ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // binary_operator_2 ::= LANGLE 
            {
              CUP$result = new OzStrToken(/*binary_operator_2*/77);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " < ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // binary_exp_2 ::= binary_exp_1 
            {
              CUP$result = new ExpressionSym(/*binary_exp_2*/63);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // binary_exp_2 ::= binary_exp_2 binary_operator_2 binary_exp_1 
            {
              CUP$result = new ExpressionSym(/*binary_exp_2*/63);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.binaryExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // binary_operator_1 ::= MINUS 
            {
              CUP$result = new OzStrToken(/*binary_operator_1*/76);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " - ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // binary_operator_1 ::= PLUS 
            {
              CUP$result = new OzStrToken(/*binary_operator_1*/76);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " + ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // binary_exp_1 ::= binary_exp_0 
            {
              CUP$result = new ExpressionSym(/*binary_exp_1*/62);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // binary_exp_1 ::= binary_exp_1 binary_operator_1 binary_exp_0 
            {
              CUP$result = new ExpressionSym(/*binary_exp_1*/62);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.binaryExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // binary_operator_0 ::= MOD 
            {
              CUP$result = new OzStrToken(/*binary_operator_0*/75);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " % ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // binary_operator_0 ::= DIVIDE 
            {
              CUP$result = new OzStrToken(/*binary_operator_0*/75);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " / ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // binary_operator_0 ::= TIMES 
            {
              CUP$result = new OzStrToken(/*binary_operator_0*/75);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = " * ";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // binary_exp_0 ::= unary_exp 
            {
              CUP$result = new ExpressionSym(/*binary_exp_0*/61);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // binary_exp_0 ::= binary_exp_0 binary_operator_0 unary_exp 
            {
              CUP$result = new ExpressionSym(/*binary_exp_0*/61);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.binaryExp (((ExpressionSym)CUP$result), (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // unary_operator ::= EXCLAM 
            {
              CUP$result = new OzStrToken(/*unary_operator*/79);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = "!";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // unary_operator ::= MINUS 
            {
              CUP$result = new OzStrToken(/*unary_operator*/79);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = "-";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // unary_operator ::= PLUS 
            {
              CUP$result = new OzStrToken(/*unary_operator*/79);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = "+";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // unary_exp ::= postfix_exp 
            {
              CUP$result = new ExpressionSym(/*unary_exp*/55);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // unary_exp ::= pre_increment_or_decrement_exp 
            {
              CUP$result = new ExpressionSym(/*unary_exp*/55);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // unary_exp ::= unary_operator unary_exp 
            {
              CUP$result = new ExpressionSym(/*unary_exp*/55);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.unaryExp (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // pre_increment_or_decrement_exp ::= increment_or_decrement_operator unary_exp 
            {
              CUP$result = new ExpressionSym(/*pre_increment_or_decrement_exp*/71);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			     return CUP$result;
			   }

			   action.unaryExp (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).sym);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // postfix_exp ::= primary 
            {
              CUP$result = new ExpressionSym(/*postfix_exp*/54);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.postfixExp (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // postfix_exp ::= post_increment_or_decrement_exp 
            {
              CUP$result = new ExpressionSym(/*postfix_exp*/54);
              
			   ((ExpressionSym)CUP$result).str_val = (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val;
			   ((ExpressionSym)CUP$result).exp = (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp;
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // increment_or_decrement_operator ::= MINUSMINUS 
            {
              CUP$result = new OzStrToken(/*increment_or_decrement_operator*/83);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = "--";
			     return CUP$result;
			   }
			   
			   ((OzStrToken)CUP$result).sym = sym.MINUSMINUS;
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // increment_or_decrement_operator ::= PLUSPLUS 
            {
              CUP$result = new OzStrToken(/*increment_or_decrement_operator*/83);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).str_val = "++";
			     return CUP$result;
			   }

			   ((OzStrToken)CUP$result).sym = sym.PLUSPLUS;
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // post_increment_or_decrement_exp ::= postfix_exp increment_or_decrement_operator 
            {
              CUP$result = new ExpressionSym(/*post_increment_or_decrement_exp*/72);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     return CUP$result;
			   }

			   if ((/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym == sym.PLUSPLUS)
			     (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym = sym.POSTPLUSPLUS;
			   else
			     (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym = sym.POSTMINUSMINUS;

			   action.unaryExp (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).exp, (/*o*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).sym);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // argument_list ::= exp 
            {
              CUP$result = new ListSym(/*argument_list*/74);
              
			   if (action.isDebug ()) 
			     ((ListSym)CUP$result).str_val = (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.argumentList (((ListSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // argument_list ::= argument_list COMMA exp 
            {
              CUP$result = new ListSym(/*argument_list*/74);
              
			   if (action.isDebug ()) {
			     ((ListSym)CUP$result).append ((/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ListSym)CUP$result).append (", ");
			     ((ListSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.argumentList (((ListSym)CUP$result), (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-2)).list, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // argument_list ::= 
            {
              CUP$result = new ListSym(/*argument_list*/74);
              
			   action.argumentList (((ListSym)CUP$result));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // instantiate_exp ::= SUPER INSTANTIATE IDENTIFIER LPAREN argument_list RPAREN 
            {
              CUP$result = new ExpressionSym(/*instantiate_exp*/60);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ("super=>");
			     ((ExpressionSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((ExpressionSym)CUP$result).append (" (");
			     ((ExpressionSym)CUP$result).append ((/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append (")");
			   }

			   action.instantiateExp (((ExpressionSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val, (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // instantiate_exp ::= attribute_access INSTANTIATE IDENTIFIER LPAREN argument_list RPAREN 
            {
              CUP$result = new ExpressionSym(/*instantiate_exp*/60);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-5)).str_val);
			     ((ExpressionSym)CUP$result).append ("=>");
			     ((ExpressionSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((ExpressionSym)CUP$result).append (" (");
			     ((ExpressionSym)CUP$result).append ((/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append (")");
			   }

			   action.instantiateExp (((ExpressionSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-5)).exp, (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // instantiate_exp ::= instantiate_exp_for_local_variable 
            {
              CUP$result = new ExpressionSym(/*instantiate_exp*/60);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // method_invoke_exp ::= SUPER POINTSTAT IDENTIFIER LPAREN argument_list RPAREN 
            {
              CUP$result = new ExpressionSym(/*method_invoke_exp*/59);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ("super->");
			     ((ExpressionSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((ExpressionSym)CUP$result).append (" (");
			     ((ExpressionSym)CUP$result).append ((/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append (")");
			   }

			   action.superMethodInvokeExp (((ExpressionSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val, (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // method_invoke_exp ::= IDENTIFIER LPAREN argument_list RPAREN 
            {
              CUP$result = new ExpressionSym(/*method_invoke_exp*/59);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((ExpressionSym)CUP$result).append (" (");
			     ((ExpressionSym)CUP$result).append ((/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append (")");
			   }

			   action.methodInvokeExp (((ExpressionSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val, (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // method_invoke_exp ::= primary POINTSTAT IDENTIFIER LPAREN argument_list RPAREN 
            {
              CUP$result = new ExpressionSym(/*method_invoke_exp*/59);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-5)).str_val);
			     ((ExpressionSym)CUP$result).append ("->");
			     ((ExpressionSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((ExpressionSym)CUP$result).append (" (");
			     ((ExpressionSym)CUP$result).append ((/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append (")");
			   }

			   action.methodInvokeExp (((ExpressionSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-5)).exp, (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // attribute_access ::= primary POINTSTAT IDENTIFIER 
            {
              CUP$result = new ExpressionSym(/*attribute_access*/70);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ExpressionSym)CUP$result).append ("->");
			     ((ExpressionSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.attributeAccess (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // name ::= attribute_access 
            {
              CUP$result = new ExpressionSym(/*name*/68);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // name ::= IDENTIFIER 
            {
              CUP$result = new ExpressionSym(/*name*/68);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.name (((ExpressionSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // literal ::= NULL 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, 
					   ClassType.NULL,
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // literal ::= FALSE 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, 
					   PrimitiveType.BOOL,
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // literal ::= TRUE 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, 
					   PrimitiveType.BOOL,
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // literal ::= STRING_LITERAL 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, 
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // literal ::= DOUBLE_LITERAL 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, 
					   PrimitiveType.DOUBLE,
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // literal ::= FLOAT_LITERAL 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, 
					   PrimitiveType.FLOAT,
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // literal ::= LONG_LITERAL 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, 
					   PrimitiveType.LONG,
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // literal ::= INT_LITERAL 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, 
					   PrimitiveType.INT,
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= CHAR_LITERAL 
            {
              CUP$result = new ExpressionSym(/*literal*/67);
              
			   if (action.isDebug ())
			     ((ExpressionSym)CUP$result).str_val = (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.literal (((ExpressionSym)CUP$result), (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val,
					   PrimitiveType.CHAR,
					   (/*l*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // instantiate_exp_for_local_variable ::= IDENTIFIER NT$18 INSTANTIATE IDENTIFIER LPAREN argument_list RPAREN 
            {
              CUP$result = new ExpressionSym(/*instantiate_exp_for_local_variable*/58);
                  
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ((/*i1*/(OzStrToken)CUP$stack.elementAt(CUP$top-6)).str_val);
			     ((ExpressionSym)CUP$result).append ("=>");
			     ((ExpressionSym)CUP$result).append ((/*i2*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((ExpressionSym)CUP$result).append (" (");
			     ((ExpressionSym)CUP$result).append ((/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append (")");
			   }

			   action.instantiateExpSecond (((ExpressionSym)CUP$result), (/*i1*/(OzStrToken)CUP$stack.elementAt(CUP$top-6)).str_val, (/*i2*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val, (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, (/*i1*/(OzStrToken)CUP$stack.elementAt(CUP$top-6)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$18 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$18*/102);
              
			   action.instantiateExpFirst ((/*i1*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, (/*i1*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // primary ::= instantiate_exp_for_local_variable 
            {
              CUP$result = new ExpressionSym(/*primary*/53);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // primary ::= method_invoke_exp 
            {
              CUP$result = new ExpressionSym(/*primary*/53);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // primary ::= LPAREN exp RPAREN 
            {
              CUP$result = new ExpressionSym(/*primary*/53);
              
			   if (action.isDebug ()) {
			     ((ExpressionSym)CUP$result).append ("(");
			     ((ExpressionSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ExpressionSym)CUP$result).append (")");
			   }

			   action.primary (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // primary ::= literal 
            {
              CUP$result = new ExpressionSym(/*primary*/53);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*l*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*l*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // primary ::= THIS 
            {
              CUP$result = new ExpressionSym(/*primary*/53);
              
			   if (action.isDebug ()) 
			     ((ExpressionSym)CUP$result).str_val = "this";

			   action.primary (((ExpressionSym)CUP$result), (/*e*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // primary ::= name 
            {
              CUP$result = new ExpressionSym(/*primary*/53);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // exp_or_empty ::= exp 
            {
              CUP$result = new ExpressionSym(/*exp_or_empty*/52);
              
			   action.expOrEmpty (((ExpressionSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // exp_or_empty ::= 
            {
              CUP$result = new ExpressionSym(/*exp_or_empty*/52);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // catch_list ::= catch_list CATCH LPAREN type_name IDENTIFIER RPAREN LBRACE NT$17 stmt_list RBRACE 
            {
              CUP$result = new ListSym(/*catch_list*/42);
              
			   if (action.isDebug ()) {
			     Emitter.indentPop ();

			     ((ListSym)CUP$result).append ((/*c_list*/(ListSym)CUP$stack.elementAt(CUP$top-9)).str_val);
			     ((ListSym)CUP$result).append (" catch (");
			     ((ListSym)CUP$result).append ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-6)).str_val);
			     ((ListSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-5)).str_val);
			     ((ListSym)CUP$result).append (") {");
			     ((ListSym)CUP$result).append ((/*s*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ListSym)CUP$result).appendLineBreak ();
			     ((ListSym)CUP$result).append ("}");
			   }

			   action.catchListSecond (((ListSym)CUP$result), (CatchStList) (/*c_list*/(ListSym)CUP$stack.elementAt(CUP$top-9)).list, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-5)).str_val);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$17 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$17*/101);
              
			   if (action.isDebug ()) 
			     Emitter.indentPush ();

			   action.catchListFirst ((CatchStList) (/*c_list*/(ListSym)CUP$stack.elementAt(CUP$top-6)).list,
						  (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-3)).type, 
						  (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-2)), (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-3)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // catch_list ::= 
            {
              CUP$result = new ListSym(/*catch_list*/42);
              
			   action.catchList (((ListSym)CUP$result));
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // try_body ::= catch_list FINALLY compound_stmt 
            {
              CUP$result = new TryBodySym(/*try_body*/43);
              
			   if (action.isDebug ()) {
			     ((TryBodySym)CUP$result).append ((/*c*/(ListSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((TryBodySym)CUP$result).append (" finally ");
			     ((TryBodySym)CUP$result).append ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.tryBody (((TryBodySym)CUP$result), (CatchStList) (/*c*/(ListSym)CUP$stack.elementAt(CUP$top-2)).list, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // try_body ::= catch_list 
            {
              CUP$result = new TryBodySym(/*try_body*/43);
              
			   if (action.isDebug ()) ((TryBodySym)CUP$result).str_val = (/*c*/(ListSym)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.tryBody (((TryBodySym)CUP$result), (CatchStList) (/*c*/(ListSym)CUP$stack.elementAt(CUP$top-0)).list);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // try_stmt ::= TRY compound_stmt try_body 
            {
              CUP$result = new StatementSym(/*try_stmt*/39);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("try ");
			     ((StatementSym)CUP$result).append ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append ((/*c_list*/(TryBodySym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.tryStmt (((StatementSym)CUP$result), (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-1)).st, (/*c_list*/(TryBodySym)CUP$stack.elementAt(CUP$top-0)).catch_list,
					   (/*c_list*/(TryBodySym)CUP$stack.elementAt(CUP$top-0)).finally_st, 
					   (/*ts*/(OzToken)CUP$stack.elementAt(CUP$top-2)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // throw_stmt ::= THROW exp_or_empty SEMI 
            {
              CUP$result = new StatementSym(/*throw_stmt*/38);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("throw ");
			     ((StatementSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append (";");
			   }

			   action.throwStmt (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).exp, (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-2)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // jump_stmt ::= RETURN exp_or_empty SEMI 
            {
              CUP$result = new StatementSym(/*jump_stmt*/37);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("return");
			     if ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).str_val.length () > 0)
			       ((StatementSym)CUP$result).append (" " + (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append (";");
			   }

			   action.jumpStmt (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).exp, (/*r*/(OzToken)CUP$stack.elementAt(CUP$top-2)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // jump_stmt ::= CONTINUE identifier_or_empty SEMI 
            {
              CUP$result = new StatementSym(/*jump_stmt*/37);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("continue");
			     if ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val.length () > 0)
			       ((StatementSym)CUP$result).append (" " + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append (";");
			   }

			   action.jumpStmt (((StatementSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val, (/*c*/(OzToken)CUP$stack.elementAt(CUP$top-2)).sym, (/*c*/(OzToken)CUP$stack.elementAt(CUP$top-2)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // jump_stmt ::= BREAK identifier_or_empty SEMI 
            {
              CUP$result = new StatementSym(/*jump_stmt*/37);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("break");
			     if ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val.length () > 0)
			       ((StatementSym)CUP$result).append (" " + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append (";");
			   }

			   action.jumpStmt (((StatementSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val, (/*b*/(OzToken)CUP$stack.elementAt(CUP$top-2)).sym, (/*b*/(OzToken)CUP$stack.elementAt(CUP$top-2)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // for_initialize_stmt ::= stmt_exp_list SEMI 
            {
              CUP$result = new StatementSym(/*for_initialize_stmt*/36);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append ("; ");
			   }

			   action.forInitializeStmt (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).exp, (/*s*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // for_initialize_stmt ::= type_name NT$16 identifier_only_or_with_initializer_list SEMI 
            {
              CUP$result = new StatementSym(/*for_initialize_stmt*/36);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).append ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((StatementSym)CUP$result).append ((/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append ("; ");
			   }

			   action.forInitializeStmt (((StatementSym)CUP$result), (IdentifierList) (/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-3)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$16 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$16*/100);
              
			   action.declarationStmtFirst ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-0)).type);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_stmt ::= FOR NT$15 LPAREN for_initialize_stmt exp_or_empty SEMI stmt_exp_list RPAREN stmt 
            {
              CUP$result = new StatementSym(/*for_stmt*/35);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("for (");
			     ((StatementSym)CUP$result).append ((/*i_st*/(StatementSym)CUP$stack.elementAt(CUP$top-5)).str_val);
			     ((StatementSym)CUP$result).append ((/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-4)).str_val);
			     ((StatementSym)CUP$result).append ("; ");
			     ((StatementSym)CUP$result).append ((/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((StatementSym)CUP$result).append (") ");
			     ((StatementSym)CUP$result).checkBlock ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.forStmt (((StatementSym)CUP$result), (/*i_st*/(StatementSym)CUP$stack.elementAt(CUP$top-5)).st, 
					   (/*e1*/(ExpressionSym)CUP$stack.elementAt(CUP$top-4)).exp, (/*e2*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st,
					   (/*fs*/(OzToken)CUP$stack.elementAt(CUP$top-8)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$15 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$15*/99);
              
			   action.loopStmtBefore ();
			   action.enterBlock ((/*fs*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // do_stmt ::= DO NT$14 stmt WHILE LPAREN exp RPAREN SEMI 
            {
              CUP$result = new StatementSym(/*do_stmt*/34);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("do ");
			     ((StatementSym)CUP$result).checkBlock ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-5)).str_val);
			     /* ((StatementSym)CUP$result).appendLineBreak (); */
			     ((StatementSym)CUP$result).append (" while (");
			     ((StatementSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((StatementSym)CUP$result).append (");");
			   }

			   action.doStmt (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-5)).st, (/*ds*/(OzToken)CUP$stack.elementAt(CUP$top-7)).line_no);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$14 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$14*/98);
              
 			   action.loopStmtBefore ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_stmt ::= WHILE LPAREN exp RPAREN NT$13 stmt 
            {
              CUP$result = new StatementSym(/*while_stmt*/33);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("while (");
			     ((StatementSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((StatementSym)CUP$result).append (")");
			     ((StatementSym)CUP$result).checkBlock ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.whileStmt (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-3)).exp, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st, (/*ws*/(OzToken)CUP$stack.elementAt(CUP$top-5)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$13 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$13*/97);
              
			   action.loopStmtBefore ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // switch_label ::= DEFAULT COLON 
            {
              CUP$result = new StatementSym(/*switch_label*/45);
              
			   if (action.isDebug ()) {
			     Emitter.indentPop ();
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("default:");
			     Emitter.indentPush ();
			   }

			   action.switchLabel (((StatementSym)CUP$result), (/*d*/(OzToken)CUP$stack.elementAt(CUP$top-1)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // switch_label ::= CASE exp COLON 
            {
              CUP$result = new StatementSym(/*switch_label*/45);
              
			   if (action.isDebug ()) {
			     Emitter.indentPop ();
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("case ");
			     ((StatementSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append (":");
			     Emitter.indentPush ();
			   }

			   action.switchLabel (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).exp, (/*c*/(OzToken)CUP$stack.elementAt(CUP$top-2)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // switch_labels ::= switch_labels switch_label 
            {
              CUP$result = new OzStrToken(/*switch_labels*/50);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).append ((/*l_list*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((OzStrToken)CUP$result).append ((/*l*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.stmtList ((/*l*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // switch_labels ::= switch_label 
            {
              CUP$result = new OzStrToken(/*switch_labels*/50);
              
			   if (action.isDebug ()) 
			     ((OzStrToken)CUP$result).str_val = (/*l*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.stmtList ((/*l*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // switch_labels_or_empty ::= switch_labels 
            {
              CUP$result = new OzStrToken(/*switch_labels_or_empty*/49);
              
			   ((OzStrToken)CUP$result).str_val = (/*l_list*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_labels_or_empty ::= 
            {
              CUP$result = new OzStrToken(/*switch_labels_or_empty*/49);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_block_stmt ::= stmt 
            {
              CUP$result = new OzStrToken(/*switch_block_stmt*/48);
              
			   if (action.isDebug ()) 
			     ((OzStrToken)CUP$result).str_val = (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.stmtList ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch_block_stmt ::= switch_labels stmt 
            {
              CUP$result = new OzStrToken(/*switch_block_stmt*/48);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).append ((/*l_list*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((OzStrToken)CUP$result).append ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			     return CUP$result;
			   }

			   action.stmtList ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switch_block_stmts ::= switch_block_stmts switch_block_stmt 
            {
              CUP$result = new OzStrToken(/*switch_block_stmts*/47);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).append ((/*s_list*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((OzStrToken)CUP$result).append ((/*s*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // switch_block_stmts ::= 
            {
              CUP$result = new OzStrToken(/*switch_block_stmts*/47);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // switch_block ::= LBRACE NT$12 switch_block_stmts switch_labels_or_empty RBRACE 
            {
              CUP$result = new StatementSym(/*switch_block*/40);
              
			   if (action.isDebug ()) {
			     Emitter.indentPop ();

			     ((StatementSym)CUP$result).append ("{");
			     ((StatementSym)CUP$result).append ((/*s*/(OzStrToken)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((StatementSym)CUP$result).append ((/*e*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("}");
			   }

			   action.compoundStmtSecond (((StatementSym)CUP$result));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$12 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$12*/96);
              
			   if (action.isDebug ()) 
			     Emitter.indentPush ();

			   action.compoundStmtFirst ((/*l*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // switch_stmt ::= SWITCH LPAREN exp RPAREN NT$11 switch_block 
            {
              CUP$result = new StatementSym(/*switch_stmt*/31);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("switch (");
			     ((StatementSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((StatementSym)CUP$result).append (") ");
			     ((StatementSym)CUP$result).append ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.switchStmtSecond (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-3)).exp, (CompoundSt) (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st, (/*ss*/(OzToken)CUP$stack.elementAt(CUP$top-5)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$11 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$11*/95);
              
			   action.switchStmtFirst ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_body ::= stmt ELSE stmt 
            {
              CUP$result = new IfBodySym(/*if_body*/44);
              
			   if (action.isDebug ()) {
			     ((IfBodySym)CUP$result).checkBlock ((/*s1*/(StatementSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((IfBodySym)CUP$result).appendLineBreak ();
			     ((IfBodySym)CUP$result).append ("else ");
			     ((IfBodySym)CUP$result).checkBlock ((/*s2*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.ifBody (((IfBodySym)CUP$result), (/*s1*/(StatementSym)CUP$stack.elementAt(CUP$top-2)).st, (/*s2*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_body ::= stmt 
            {
              CUP$result = new IfBodySym(/*if_body*/44);
              
			   if (action.isDebug ()) 
			     ((IfBodySym)CUP$result).checkBlock ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);

			   action.ifBody (((IfBodySym)CUP$result), (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_stmt ::= IF LPAREN exp RPAREN if_body 
            {
              CUP$result = new StatementSym(/*if_stmt*/30);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("if (");
			     ((StatementSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((StatementSym)CUP$result).append (")");
			     ((StatementSym)CUP$result).append ((/*b*/(IfBodySym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.ifStmt (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-2)).exp, (/*b*/(IfBodySym)CUP$stack.elementAt(CUP$top-0)).if_st, (/*b*/(IfBodySym)CUP$stack.elementAt(CUP$top-0)).else_st, (/*is*/(OzToken)CUP$stack.elementAt(CUP$top-4)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaration_stmt ::= type_name NT$10 identifier_only_or_with_initializer_list SEMI 
            {
              CUP$result = new StatementSym(/*declaration_stmt*/32);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((StatementSym)CUP$result).append ((/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append (";");
			   }

			   action.declarationStmtSecond (((StatementSym)CUP$result), (IdentifierList) (/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-3)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$10 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$10*/94);
              
			   if (!action.isParseImplementation ()) 
			     return CUP$result;

			   action.declarationStmtFirst ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-0)).type);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // compound_stmt ::= LBRACE NT$9 stmt_list RBRACE 
            {
              CUP$result = new StatementSym(/*compound_stmt*/29);
              
			   if (action.isDebug ()) {
			     Emitter.indentPop ();

			     ((StatementSym)CUP$result).append ("{");
			     ((StatementSym)CUP$result).append ((/*s*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ("}");
			   }

			   action.compoundStmtSecond (((StatementSym)CUP$result));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$9 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$9*/93);
              
			   if (action.isDebug ()) 
			     Emitter.indentPush ();
			   
			   action.compoundStmtFirst ((/*l*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exp_stmt ::= exp_of_exp_stmt SEMI 
            {
              CUP$result = new StatementSym(/*exp_stmt*/28);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((StatementSym)CUP$result).append (";");
			   }

			   action.expStmt (((StatementSym)CUP$result), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-1)).exp);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // label_stmt ::= IDENTIFIER COLON NT$8 stmt 
            {
              CUP$result = new StatementSym(/*label_stmt*/27);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((StatementSym)CUP$result).append (":");
			     ((StatementSym)CUP$result).append ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.labelStmtSecond (((StatementSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$8 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$8*/92);
              
			   action.labelStmtFirst ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmt_list ::= stmt_list block_stmt 
            {
              CUP$result = new OzStrToken(/*stmt_list*/46);
              
			   if (action.isDebug ()) {
			     ((OzStrToken)CUP$result).append ((/*s_list*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((OzStrToken)CUP$result).append ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.stmtList ((/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmt_list ::= 
            {
              CUP$result = new OzStrToken(/*stmt_list*/46);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // block_stmt ::= stmt 
            {
              CUP$result = new StatementSym(/*block_stmt*/41);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // block_stmt ::= declaration_stmt 
            {
              CUP$result = new StatementSym(/*block_stmt*/41);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmt ::= error RBRACE 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), (/*r*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmt ::= error SEMI 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), (/*s*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmt ::= SEMI 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   if (action.isDebug ()) {
			     ((StatementSym)CUP$result).appendLineBreak ();
			     ((StatementSym)CUP$result).append (";");
			     return CUP$result;
			   }

			   action.stmt (((StatementSym)CUP$result), (/*s*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmt ::= try_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmt ::= throw_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmt ::= jump_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmt ::= for_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmt ::= do_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmt ::= while_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmt ::= switch_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmt ::= if_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmt ::= compound_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmt ::= exp_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmt ::= label_stmt 
            {
              CUP$result = new StatementSym(/*stmt*/26);
              
			   action.stmt (((StatementSym)CUP$result), 
					(/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).str_val, (/*s*/(StatementSym)CUP$stack.elementAt(CUP$top-0)).st);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // identifier_or_empty ::= IDENTIFIER 
            {
              CUP$result = new OzStrToken(/*identifier_or_empty*/25);
              
			   if (action.isDebug ())
			     ((OzStrToken)CUP$result).str_val = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.identifierOrEmpty (((OzStrToken)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // identifier_or_empty ::= 
            {
              CUP$result = new OzStrToken(/*identifier_or_empty*/25);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // identifier_only_or_with_initializer ::= instantiate_exp_for_local_variable 
            {
              CUP$result = new IdentifierSym(/*identifier_only_or_with_initializer*/24);
              
			   if (action.isDebug ()) 
			     ((IdentifierSym)CUP$result).str_val = (/*i*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val;
			   
			   action.identifierWithInitializer (((IdentifierSym)CUP$result), (/*i*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // identifier_only_or_with_initializer ::= IDENTIFIER EQUAL exp 
            {
              CUP$result = new IdentifierSym(/*identifier_only_or_with_initializer*/24);
              
			   if (action.isDebug ()) {
			     ((IdentifierSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((IdentifierSym)CUP$result).append (" = ");
			     ((IdentifierSym)CUP$result).append ((/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }
			   
			   action.identifierWithInitializer (((IdentifierSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-2)), (/*e*/(ExpressionSym)CUP$stack.elementAt(CUP$top-0)).exp);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // identifier_only_or_with_initializer ::= IDENTIFIER 
            {
              CUP$result = new IdentifierSym(/*identifier_only_or_with_initializer*/24);
              
			   if (action.isDebug ()) 
			     ((IdentifierSym)CUP$result).str_val = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;
			   
			   action.identifierOnlyOrWithInitializer (((IdentifierSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)));
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // identifier_only_or_with_initializer_list ::= identifier_only_or_with_initializer 
            {
              CUP$result = new ListSym(/*identifier_only_or_with_initializer_list*/23);
              
			   if (action.isDebug ()) 
			     ((ListSym)CUP$result).str_val = (/*i*/(IdentifierSym)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.identifierOnlyOrWithInitializerList (((ListSym)CUP$result), (/*i*/(IdentifierSym)CUP$stack.elementAt(CUP$top-0)).id);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // identifier_only_or_with_initializer_list ::= identifier_only_or_with_initializer_list COMMA identifier_only_or_with_initializer 
            {
              CUP$result = new ListSym(/*identifier_only_or_with_initializer_list*/23);
              
			   if (action.isDebug ()) {
			     ((ListSym)CUP$result).append ((/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ListSym)CUP$result).append (", ");
			     ((ListSym)CUP$result).append ((/*i*/(IdentifierSym)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			   action.identifierOnlyOrWithInitializerList (((ListSym)CUP$result), (IdentifierList) (/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-2)).list, (/*i*/(IdentifierSym)CUP$stack.elementAt(CUP$top-0)).id);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // identifier_list ::= IDENTIFIER 
            {
              CUP$result = new ListSym(/*identifier_list*/22);
              
			   if (action.isDebug ()) 
			     ((ListSym)CUP$result).str_val = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val;

			   action.identifierList (((ListSym)CUP$result), (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              CUP$result = new ListSym(/*identifier_list*/22);
              
			   if (action.isDebug ()) {
			     ((ListSym)CUP$result).append ((/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-2)).str_val);
			     ((ListSym)CUP$result).append (", ");
			     ((ListSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			   }

			  action.identifierList (((ListSym)CUP$result), (IdentifierList) (/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-2)).list, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // argument_declarations ::= type_name IDENTIFIER 
            {
              CUP$result = new ListSym(/*argument_declarations*/21);
              
			   if (action.isDebug ()) {
			     ((ListSym)CUP$result).append ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ListSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     return CUP$result;
			   }

			   action.argumentDeclarations (((ListSym)CUP$result), (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-1)).type, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // argument_declarations ::= argument_declarations COMMA type_name IDENTIFIER 
            {
              CUP$result = new ListSym(/*argument_declarations*/21);
              
			   if (action.isDebug ()) {
			     ((ListSym)CUP$result).append ((/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-3)).str_val);
			     ((ListSym)CUP$result).append (", ");
			     ((ListSym)CUP$result).append ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-1)).str_val);
			     ((ListSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     return CUP$result;
			   }

			   action.argumentDeclarations (((ListSym)CUP$result), (IdentifierList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-3)).list, (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-1)).type, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // argument_declarations ::= 
            {
              CUP$result = new ListSym(/*argument_declarations*/21);
              
			   action.argumentDeclarations (((ListSym)CUP$result));
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // non_empty_method_body ::= LBRACE NT$7 stmt_list RBRACE 
            {
              CUP$result = new symbol(/*non_empty_method_body*/13);
              
			   if (action.isDebug ()) {
			     if ((/*s*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val.length () == 0) {
			       Emitter.indentPop ();
			     } else {
			       Emitter.emit ((/*s*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val);
			       Emitter.indentPop ();
			       Emitter.emitln ();
			     }
			     Emitter.emitln ("}");
			     Emitter.emitln ();
			     return CUP$result;
			   }
			   action.nonEmptyMethodBodyAfter ((/*r*/(OzToken)CUP$stack.elementAt(CUP$top-0)).offset);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$7 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$7*/91);
              
			   if (action.isDebug ()) {
			     Emitter.emit (" {");
			     Emitter.indentPush ();
			   }

			   action.nonEmptyMethodBodyBefore ((/*l*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // method_body ::= non_empty_method_body 
            {
              CUP$result = new symbol(/*method_body*/12);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method_body ::= SEMI 
            {
              CUP$result = new symbol(/*method_body*/12);
              
			   if (action.isDebug ()) {
			     Emitter.emitln (";");
			     Emitter.emitln ();
			     return CUP$result;
			   }

			   action.emptyMethodBody ((/*s*/(OzToken)CUP$stack.elementAt(CUP$top-0)).offset);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_name ::= class_or_cell IDENTIFIER 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     if ((/*c*/(OzToken)CUP$stack.elementAt(CUP$top-1)).int_val == sym.CELL)
			       ((TypeSym)CUP$result).append ("cell ");
			     else
			       ((TypeSym)CUP$result).append ("class ");
			     ((TypeSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     ((TypeSym)CUP$result).append (" ");
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0));
			   ((TypeSym)CUP$result).line_no = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*c*/(OzToken)CUP$stack.elementAt(CUP$top-1)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type_name ::= IDENTIFIER 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).append ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     ((TypeSym)CUP$result).append (" ");
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0));
			   ((TypeSym)CUP$result).line_no = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type_name ::= CONDITION 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "condition ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.CONDITION;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_name ::= BOOL 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "bool ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.BOOL;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_name ::= DOUBLE 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "double ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.DOUBLE;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_name ::= FLOAT 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "float ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.FLOAT;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_name ::= LONG 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "long ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.LONG;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_name ::= INT 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "int ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.INT;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_name ::= SHORT 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "short ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.SHORT;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_name ::= CHAR 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "char ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.CHAR;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_name ::= BYTE 
            {
              CUP$result = new TypeSym(/*type_name*/14);
              
			   if (action.isDebug ()) {
			     ((TypeSym)CUP$result).str_val = "byte ";
			     return CUP$result;
			   }

			   ((TypeSym)CUP$result).type = PrimitiveType.BYTE;
			   ((TypeSym)CUP$result).line_no = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).line_no;
			   ((TypeSym)CUP$result).offset = (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // modifier ::= TRANSIENT 
            {
              CUP$result = new OzToken(/*modifier*/19);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("transient ");
			     return CUP$result;
			   }

			   ((OzToken)CUP$result).int_val = Constants.TRANSIENT;
			   ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // modifier ::= ABSTRACT 
            {
              CUP$result = new OzToken(/*modifier*/19);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("abstract ");
			     return CUP$result;
			   }

			   ((OzToken)CUP$result).int_val = Constants.ABSTRACT;
			   ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // modifier ::= ONCE 
            {
              CUP$result = new OzToken(/*modifier*/19);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("once ");
			     return CUP$result;
			   }

			   ((OzToken)CUP$result).int_val = Constants.ONCE;
			   ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // modifier ::= LOCKED 
            {
              CUP$result = new OzToken(/*modifier*/19);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("locked ");
			     return CUP$result;
			   }

			   ((OzToken)CUP$result).int_val = Constants.LOCKED;
			   ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // modifier ::= STATIC 
            {
              CUP$result = new OzToken(/*modifier*/19);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("static ");
			     return CUP$result;
			   }

			   ((OzToken)CUP$result).int_val = Constants.STATIC;
			   ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // modifier ::= FINAL 
            {
              CUP$result = new OzToken(/*modifier*/19);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("final ");
			     return CUP$result;
			   }

			   ((OzToken)CUP$result).int_val = Constants.FINAL;
			   ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // modifier_list ::= modifier_list modifier 
            {
              CUP$result = new OzToken(/*modifier_list*/18);
              
			   ((OzToken)CUP$result).int_val = (/*m_list*/(OzToken)CUP$stack.elementAt(CUP$top-1)).int_val |= (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).int_val;
			   if ((/*m_list*/(OzToken)CUP$stack.elementAt(CUP$top-1)).offset == 0)  
			     ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // modifier_list ::= 
            {
              CUP$result = new OzToken(/*modifier_list*/18);
              
			   ((OzToken)CUP$result).int_val = 0;
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // access_modifier ::= PROTECTED 
            {
              CUP$result = new OzToken(/*access_modifier*/17);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("protected ");
			     return CUP$result;
			   }

			   ((OzToken)CUP$result).int_val = Constants.PROTECTED;
			   ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // access_modifier ::= PUBLIC 
            {
              CUP$result = new OzToken(/*access_modifier*/17);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("public ");
			     return CUP$result;
			   }

			   ((OzToken)CUP$result).int_val = Constants.PUBLIC;
			   ((OzToken)CUP$result).offset = (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-0)).getOffset ();
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // access_modifier ::= 
            {
              CUP$result = new OzToken(/*access_modifier*/17);
              
			   ((OzToken)CUP$result).int_val = Constants.PRIVATE;
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // constructor_declaration ::= NEW IDENTIFIER LPAREN argument_declarations RPAREN NT$6 non_empty_method_body 
            {
              CUP$result = new symbol(/*constructor_declaration*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$6*/90);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("new " + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val + " (" +
					   (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val + ")");
			     return CUP$result;
			   }

			   action.constructorDeclaration (Constants.NEW, 0, 
							  PrimitiveType.VOID,
							  (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val, 
							  (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).getOffset ());
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_declaration ::= access_modifier modifier_list VOID IDENTIFIER LPAREN argument_declarations RPAREN NT$5 method_body 
            {
              CUP$result = new symbol(/*method_declaration*/10);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$5*/89);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("void " + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val + " (" + 
					   (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val + ")");
			     return CUP$result;
			   }

			   int pos = (/*am*/(OzToken)CUP$stack.elementAt(CUP$top-6)).int_val == 0 ? (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-5)).int_val == 0 ? (/*t*/(OzToken)CUP$stack.elementAt(CUP$top-4)).getOffset () : (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-5)).getOffset () : (/*am*/(OzToken)CUP$stack.elementAt(CUP$top-6)).getOffset ();

			   action.methodDeclaration ((/*am*/(OzToken)CUP$stack.elementAt(CUP$top-6)).int_val, (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-5)).int_val,
						     PrimitiveType.VOID, 
						     (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val,
						     (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, pos);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_declaration ::= access_modifier modifier_list type_name IDENTIFIER LPAREN argument_declarations RPAREN NT$4 method_body 
            {
              CUP$result = new symbol(/*method_declaration*/10);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$4*/88);
              
			   if (action.isDebug ()) {
			     Emitter.emit ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-4)).str_val + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val + 
					   " (" + (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val + ")");
			     return CUP$result;
			   }

			   int pos = (/*am*/(OzToken)CUP$stack.elementAt(CUP$top-6)).int_val == 0 ? (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-5)).int_val == 0 ? (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-4)).getOffset () : (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-5)).getOffset () : (/*am*/(OzToken)CUP$stack.elementAt(CUP$top-6)).getOffset ();

			   action.methodDeclaration ((/*am*/(OzToken)CUP$stack.elementAt(CUP$top-6)).int_val, (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-5)).int_val,
						     (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-4)).type, (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-3)).str_val,
						     (ExpressionList) (/*a_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, pos);
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute_declaration ::= access_modifier modifier_list type_name identifier_list SEMI 
            {
              CUP$result = new symbol(/*attribute_declaration*/9);
              
			   if (action.isDebug ()) {
			     Emitter.emitln ((/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-2)).str_val + (/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).str_val + ";");
			     Emitter.emitln ();
			   }

			   int pos = (/*am*/(OzToken)CUP$stack.elementAt(CUP$top-4)).int_val == 0 ? (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-3)).int_val == 0 ? (/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-2)).getOffset () : (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-3)).getOffset () : (/*am*/(OzToken)CUP$stack.elementAt(CUP$top-4)).getOffset ();

			   action.attributeDeclaration ((/*am*/(OzToken)CUP$stack.elementAt(CUP$top-4)).int_val, (/*m*/(OzToken)CUP$stack.elementAt(CUP$top-3)).int_val, 
							(/*t*/(TypeSym)CUP$stack.elementAt(CUP$top-2)).type,
							(IdentifierList) (/*i_list*/(ListSym)CUP$stack.elementAt(CUP$top-1)).list, pos, (/*s*/(OzToken)CUP$stack.elementAt(CUP$top-0)).offset);
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // member_declaration ::= error RBRACE 
            {
              CUP$result = new symbol(/*member_declaration*/8);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // member_declaration ::= error SEMI 
            {
              CUP$result = new symbol(/*member_declaration*/8);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // member_declaration ::= constructor_declaration 
            {
              CUP$result = new symbol(/*member_declaration*/8);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // member_declaration ::= method_declaration 
            {
              CUP$result = new symbol(/*member_declaration*/8);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // member_declaration ::= attribute_declaration 
            {
              CUP$result = new symbol(/*member_declaration*/8);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // member_declarations ::= member_declarations member_declaration 
            {
              CUP$result = new symbol(/*member_declarations*/7);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // member_declarations ::= 
            {
              CUP$result = new symbol(/*member_declarations*/7);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // class_body ::= error RBRACE 
            {
              CUP$result = new symbol(/*class_body*/6);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_body ::= LBRACE NT$3 member_declarations RBRACE 
            {
              CUP$result = new symbol(/*class_body*/6);
              
			   if (action.isDebug ()) {
			     Emitter.indentPop ();
			     Emitter.emitln ();
			     Emitter.emitln ("}");
			     Emitter.emitln ();
			   }
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$3*/87);
              
			   if (action.isDebug ()) {
			     Emitter.emit (" {");
			     Emitter.indentPush ();
			     Emitter.emitln ();
			   }
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // interface_list ::= IDENTIFIER 
            {
              CUP$result = new symbol(/*interface_list*/5);
              
			   if (action.isDebug ()) {
			     Emitter.emit ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     return CUP$result;
			   }

			   action.superInterfaceList ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // interface_list ::= interface_list COMMA IDENTIFIER 
            {
              CUP$result = new symbol(/*interface_list*/5);
              
			   if (action.isDebug ()) {
			     Emitter.emit (", " + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     return CUP$result;
			   }

			   action.superInterfaceList ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // super_class_list ::= interface_list 
            {
              CUP$result = new symbol(/*super_class_list*/4);
              
			   if (action.isDebug ()) {
			     return CUP$result;
			   }
			   action.superClassList ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // super_class_list ::= TIMES IDENTIFIER COMMA NT$2 interface_list 
            {
              CUP$result = new symbol(/*super_class_list*/4);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$2*/86);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("*" + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)).str_val + ", ");
			     return CUP$result;
			   }
			   action.superClassList ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-1)));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // super_class_list ::= TIMES IDENTIFIER 
            {
              CUP$result = new symbol(/*super_class_list*/4);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("*" + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     return CUP$result;
			   }

			   action.superClassList ((/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // super_classes ::= COLON NT$1 super_class_list 
            {
              CUP$result = new symbol(/*super_classes*/3);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$1*/85);
              
		
			   if (action.isDebug ()) {
			     Emitter.emit (" : ");
			     return CUP$result;
			   }
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // super_classes ::= 
            {
              CUP$result = new symbol(/*super_classes*/3);
              
			   action.superClasses ();
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_modifier ::= PROTECTED 
            {
              CUP$result = new int_token(/*class_modifier*/16);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("protected ");
			     return CUP$result;
			   }

			   ((int_token)CUP$result).int_val = Constants.PROTECTED;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_modifier ::= FINAL 
            {
              CUP$result = new int_token(/*class_modifier*/16);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("final ");
			     return CUP$result;
			   }

			   ((int_token)CUP$result).int_val = Constants.FINAL;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_modifier ::= ABSTRACT 
            {
              CUP$result = new int_token(/*class_modifier*/16);
              
			   if (action.isDebug ()) {
			     Emitter.emit ("abstract ");
			     return CUP$result;
			   }

			   ((int_token)CUP$result).int_val = Constants.ABSTRACT;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_modifier_list ::= class_modifier_list class_modifier 
            {
              CUP$result = new int_token(/*class_modifier_list*/15);
              
			   ((int_token)CUP$result).int_val = (/*m_list*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val |= (/*m*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_modifier_list ::= 
            {
              CUP$result = new int_token(/*class_modifier_list*/15);
              
			   ((int_token)CUP$result).int_val = 0;
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_or_cell ::= CELL 
            {
              CUP$result = new OzToken(/*class_or_cell*/20);
              
			   ((OzToken)CUP$result).int_val = sym.CELL;
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_or_cell ::= CLASS 
            {
              CUP$result = new OzToken(/*class_or_cell*/20);
              
			   ((OzToken)CUP$result).int_val = sym.CLASS;
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_declaration ::= class_modifier_list class_or_cell IDENTIFIER NT$0 super_classes class_body 
            {
              CUP$result = new symbol(/*class_declaration*/2);
              
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$0*/84);
              
			   if (action.isDebug ()) {
			     if ((/*c*/(OzToken)CUP$stack.elementAt(CUP$top-1)).int_val == sym.CELL)
			       Emitter.emit ("cell " + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			     else
			       Emitter.emit ("class " + (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)).str_val);
			   } else 
			     action.classDeclaration ((/*m*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*c*/(OzToken)CUP$stack.elementAt(CUP$top-1)).int_val,
						      (/*i*/(OzStrToken)CUP$stack.elementAt(CUP$top-0)));
                        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_declarations ::= error 
            {
              CUP$result = new symbol(/*class_declarations*/1);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_declarations ::= class_declaration 
            {
              CUP$result = new symbol(/*class_declarations*/1);
              	
			   action.classDeclarations ();
			
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= class_declarations EOF 
            {
              CUP$result = new java_cup.runtime.token(/*$START*/0);
              
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // class_declarations ::= class_declarations class_declaration 
            {
              CUP$result = new symbol(/*class_declarations*/1);
              
			   action.classDeclarations ();
			
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
};

